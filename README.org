#+title: Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :results output silent

* About

My very own Emacs configuration. Inspired by [[https://github.com/daviwil/emacs-from-scratch][Emacs from scratch]], customised to what I actually need.

* Setup

This configuration is designed to bootstrap itself, but there are a few dependencies that need to be installed first.

Before starting Emacs, install Homebrew (on MacOS), and use it to install:
- `ispell`, for spell checking
- `coreutils`, for the `gls` CLI command, which is an alternative to `ls` that can be used by dired
- `cmake` and `libtool`, to compile dependencies of vterm and Roam
- `gopls`, which is an LSP for Go, and will install `go` as a dependency

#+begin_src shell
brew install ispell coreutils cmake libtool gopls
#+end_src

Instructions on how to set Caps Lock to act as Control are [[https://support.apple.com/en-gb/guide/mac-help/mchlp1011/mac][here]]. Remember to do this for each machine and keyboard combination.

Run `M-x nerd-icons-install-fonts` to download and install icons used by the `nerd-icons` package.

The `multi-vterm` package seems to cause problems when bootstrapping the configuration. I'm not sure why, but manually deleting and reinstalling the package (through `list-packages`) seems to fix it.

Beancount mode isn't available through ELPA/MELPA, so it must be cloned from Github. To make it accessible to use-package, run `M-x package-install-file ~/beancount-mode/beancount.el`.

#+begin_src shell
git clone git@github.com:beancount/beancount-mode.git
#+end_src

* Start

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Start loading config
  ;; _____________________________________________________________________________

  (toggle-debug-on-error)

  (setq inhibit-startup-message t)

  (switch-to-buffer "*Messages*")
  (message "Started loading config at %s" (format-time-string "%T"))

#+end_src

* Package management

- Set up the MELPA archive.
- Make sure that use-package is installed, so that it can be used to install all the other packages.
- Always ensure packages to avoid confusion over what is or isn't installed.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Package management
  ;; _____________________________________________________________________________

  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (package-initialize)

  (unless package-archive-contents
   (package-refresh-contents))

  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Shortcuts

Settings and key bindings that make common actions faster.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Global configuration
  ;; _____________________________________________________________________________

  ;; Make it easier to access emacs config
  (set-register ?e (cons 'file "~/.emacs.d/README.org"))

  ;; Cycle through buffers easily
  (global-set-key (kbd "s-<left>") 'previous-buffer)
  (global-set-key (kbd "s-<right>") 'next-buffer)

  ;; Cycle through windows easily
  (defun nrm/switch-to-prev-window ()
    (interactive)
    (other-window -1))
  (global-set-key (kbd "C-<tab>") 'other-window)
  (global-set-key (kbd "C-S-<tab>") 'nrm/switch-to-prev-window)

  ;; Simplify yes-or-no prompts
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; On MacOS, make the right option key not act as meta, to let me type characters that need option
  (setq ns-right-alternate-modifier 'none)

#+end_src

* Appearance

Make Emacs look fabulous :sparkles:

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Appearance
  ;; _____________________________________________________________________________

  (setq ring-bell-function 'ignore)

  (use-package ef-themes
    :config
    (load-theme 'ef-duo-dark t))

  (use-package fontaine
    :custom
    (fontaine-presets
     '((regular
	:default-family "Menlo"
	:default-height 135)))
    :config
    (fontaine-set-preset 'regular))

  (column-number-mode)
  (global-display-line-numbers-mode)
  (global-visual-line-mode)

  (use-package visual-fill-column
    :hook (org-mode . visual-fill-column-mode)
    :custom
    (visual-fill-column-width 120)
    (visual-fill-column-center-text nil)
    (visual-fill-column-enable-sensible-window-split t)
    :config
    (advice-add 'text-scale-adjust :after #'visual-fill-column-adjust))

  ;; When wrapping, respect the paragraph indentation
  (use-package adaptive-wrap
    :hook (visual-fill-column-mode . adaptive-wrap-prefix-mode))

  ;; Icons that can be used by several packages
  (use-package nerd-icons)

  (use-package nerd-icons-dired
    :hook (dired-mode . nerd-icons-dired-mode))

  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

  (use-package nerd-icons-completion
    :config
    (nerd-icons-completion-mode))

  (use-package nerd-icons-corfu)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-minor-modes t))

  (use-package golden-ratio
    :config
    (golden-ratio-mode 1))

#+end_src

* Writing

Utilities for writing in natural languages.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Writing
  ;; _____________________________________________________________________________

  ;; Natural language formatting and spelling
  (setq sentence-end-double-space nil)
  (setq ispell-program-name "/opt/homebrew/bin/ispell")
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))

#+end_src

* Silly things

Everything else in this configuration serves a purpose. The packages in this section are just for fun. They'll be the first to be sacrificed when Emacs inevitable devours all my memory.

#+begin_src emacs-lisp
  (use-package nyan-mode
    :config (nyan-mode 1))

  (use-package dad-joke)

#+end_src

* Completion

** Completing read framework

A set of complementary packages that provide minibuffer completion. I saw this set referred to as the MOVEC pentagram.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Completion
  ;; _____________________________________________________________________________

  ;; VERTical Interactive COmpletion - update the minibuffer completions while typing
  (use-package vertico
    :config
    (vertico-mode 1)
    :custom
    (vertico-count 20)
    (vertico-cycle t))

  ;; Order minibuffer completions by recency
  (savehist-mode 1)

  ;; Rich annotations in the minibuffer
  (use-package marginalia
    :config
    (marginalia-mode 1))

  ;; Out of order pattern matching completion
  ;; Style dispatchers note: affix ! to invert match; affix & to match annotation instead of candidate
  (use-package orderless
    :custom
    (completion-styles '(orderless basic)))

  ;; Enhanced versions of builtin search and navigation commands
  (use-package consult
    :custom
    (consult-line-start-from-top t)
    :bind (;; Prefix mnemonic: "alt search"
	   ;; Recursive grep
	   ("M-s M-g" . consult-grep)
	   ;; Search for file names recursively
	   ("M-s M-f" . consult-find)
	   ;; Search through the outline (headings) of the buffer
	   ("M-s M-o" . consult-outline)
	   ;; Search through the imenu items of the buffer
	   ("M-s M-i" . consult-imenu)
	   ;; Search the current buffer
	   ("C-s" . consult-line)
	   ;; Switch to another buffer, bookmark, or recently opened file
	   ;; Filters: b buffers; SPC hidden buffers; * modified buffers; f recent files; r registers; m bookmarks
	   ("C-x b" . consult-buffer)
	   ;; Interactively select item to yank from kill-ring
	   ("C-M-y" . consult-yank-from-kill-ring)
	   ;; Goto position at line:column
	   ("s-l" . consult-goto-line)))

  ;; Enable recent files as a virtual buffer source for consult-buffer
  (recentf-mode 1)

  ;; Actions based on context
  (use-package embark
    :bind
    ("C-." . embark-act)
    ("s-." . embark-dwim)
    (:map minibuffer-local-map
	  ;; Retains minibuffer behaviour
	  ("C-c C-c" . embark-collect)
	  ;; Exports contents to a buffer in an appropriate major mode
	  ("C-c C-e" . embark-export)))

  (use-package embark-consult)

#+end_src

** Completion at point

Text completion for source code and natural language.

#+begin_src emacs-lisp

  ;; UI for completion at point; use M-SPC to insert a separator
  (use-package corfu
    :config
    (global-corfu-mode 1)
    (corfu-history-mode 1)
    (corfu-popupinfo-mode 1)
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
    :custom
    (corfu-auto t)
    (corfu-cycle t)
    (corfu-preview-current nil)
    (corfu-popupinfo-delay (cons 1.0 0.1)))

  ;; Extra capfs
  (use-package cape
    :config
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file))

#+end_src

** which-key

When typing a key bind prefix, WK mode expands the minibuffer to display commands under that prefix.

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.5))

#+end_src

* Built-in mode improvements

** Dired

Toggle dired omit mode with "C-x M-o". This mode hides "uninteresting" files such as backup and dot files. This is better than hiding files through options passed to the ls command because it lets me quickly toggle the mode when I need to look at dot files, for example.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Dired
  ;; _____________________________________________________________________________

  (use-package dired
    ;; dired is not a -package.el package, so don't attempt to install it.
    :ensure nil
    :hook (dired-mode . dired-omit-mode)
    :custom
    (dired-listing-switches "-lah --group-directories-first")
    (insert-directory-program "gls"))

  (use-package dired-x
    ;; Also not a proper -package.el.
    :ensure nil
    :config
    (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$")))

  (use-package wdired
    :custom
    (wdired-use-dired-vertical-movement t))

#+end_src

** IBuffer

- Replace `list-buffers` the more powerful built-in `ibuffer`.
- Group buffers by type, and make it easier to collapse groups.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; IBuffer
  ;; _____________________________________________________________________________

  (use-package ibuffer
    ;; ibuffer is not a -package.el package, so don't attempt to install it.
    :ensure nil
    :custom
    (ibuffer-default-sorting-mode 'filename/process)
    (ibuffer-saved-filter-groups
     (quote (("default"
	      ("Side effects" (or
			       (derived-mode . helpful-mode)
			       (and
				(name . "^\\*")
				(size-lt . 1))))
	      ("Dired" (mode . dired-mode))
	      ("Org" (mode . org-mode))
	      ("Source code" (or
			      (derived-mode . prog-mode)
			      (derived-mode . protobuf-mode)))
	      ("Version control" (derived-mode . magit-section-mode))))))
    :hook
    (ibuffer-mode . (lambda () (ibuffer-switch-to-saved-filter-groups "default")))
    :config
    (defun nrm/ibuffer-toggle-current-group()
      (interactive)
      (ibuffer-forward-filter-group)
      (ibuffer-backward-filter-group)
      (ibuffer-toggle-filter-group))
    :bind
    (("C-x C-b" . ibuffer)
     :map ibuffer-mode-map
     ("<tab>" . nrm/ibuffer-toggle-current-group)))

#+end_src

** Ediff

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Ediff
  ;; _____________________________________________________________________________

  (use-package ediff
    :custom
    (ediff-keep-variants nil)
    (ediff-make-buffers-readonly-at-startup t)
    (ediff-split-window-function 'split-window-horizontally)
    (ediff-window-setup-function 'ediff-setup-windows-plain))

#+end_src

** wgrep

- Writable grep results.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Wgrep
  ;; _____________________________________________________________________________

  (use-package wgrep)

#+end_src

* Magit

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Magit
  ;; _____________________________________________________________________________

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    (magit-diff-refine-hunk 'all)
    :bind ("C-x g" . magit-status))

#+end_src

* Org

** org-mode and UI

Configuration that I want to apply to every Org buffer by default.

Actions can be in one of the following states, according to the GTD method:
- SCOPE: I want to do something about this, but I haven't decided what. I need to spend some time figuring out what I need to do, if anything.
- BACKLOG: I have identified there is something I want to do/process, but it isn't urgent. It is noted down for later.
- TODO: I have something to do, and I know exactly what it is. This task is ready to be worked on, as soon as I decide to pick it up.
- WAIT: This task is blocked on something, such as receiving an email response. I should check in every once in a while, but there is nothing I can currently do about it.
- REVIEW: I have finished this task, and I should spend some time writing a mini-debrief about it with any notes I want to keep, as well as any next actions.
- DONE: This task is done, reviewed, and archived somewhere.
- CANCELLED: I decided not to do this task.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Org
  ;; _____________________________________________________________________________

  (use-package org
    :bind
    ("\C-cl" . org-store-link)
    ("s-a" . org-agenda)
    :custom
    (org-ellipsis " ▾")
    (org-todo-keywords '((sequence "SCOPE(s)" "BACKLOG(b)" "TODO(t)" "WAIT(w)" "REVIEW(r)" "|" "DONE(d)" "CANCELLED(c)")))
    ;; Record the date but not the time of day when a todo item is done
    (org-log-done 'time)
    (org-log-done-with-time nil)
    (org-log-into-drawer t)
    ;; Allow items to be refiled to the top level in a file, rather than under another headline
    (org-refile-use-outline-path 'file)
    ;; Show file and headline paths in the refile completion buffer
    (org-outline-path-complete-in-steps nil)
    ;; Refile targets to the top of files and headlines, rather than the end
    (org-reverse-note-order t)
    ;; Display done items with their completion date
    (org-agenda-start-with-log-mode t)
    (org-agenda-log-mode-items '(closed clock state))
    (org-agenda-window-setup "current-window")
    ;; If an entry has a TODO label, don't check its children
    (org-agenda-todo-list-sublevels nil)
    :hook
    (org-agenda-mode . (lambda () (display-line-numbers-mode -1)))
    :config
    ;; Save all org buffers after refiling, to prevent entries being lost if Emacs crashes
    (advice-add 'org-refile :after 'org-save-all-org-buffers))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Babel

How meta!

- Automatically tangle this file on save to generate init.el.
- Don't ask for permission to run code in org babel.
- `org-tempo` enables expanding snippets into structures, such as code blocks for specific languages.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Babel
  ;; _____________________________________________________________________________

  ;; Automatically tangle the README.org file on save
  (defun nrm/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/README.org"))
      (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'nrm/org-babel-tangle-config)))

  (setq org-confirm-babel-evaluate nil)

  (use-package org-tempo
    :ensure nil
    :config
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell")))

#+end_src

** Roam

To make a header in a file into its own node, run `org-id-get-create`.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Roam
  ;; _____________________________________________________________________________

  (use-package emacsql-sqlite-builtin)

  (use-package org-roam
    :demand
    :custom
    (org-roam-database-connector 'sqlite-builtin)
    (org-roam-directory "~/roam")
    (org-roam-node-display-template
     (concat "${title:*} "
	     (propertize "${tags:*}" 'face 'org-tag)))
    (org-roam-capture-templates
     (let ((default-file "roam-${slug}.org")
	   (default-header "#+title: ${title}\n#+category: ${title}\n#+date: %U\n#+filetags: "))
       `(("t" "Topic" plain
	  "%?"
	  :target (file+head ,default-file ,(concat default-header "Topic"))
	  :unnarrowed t)
	 ("a" "Project" plain
	  "* Goals\n%?\n* Actions\n"
	  :target (file+head ,default-file ,(concat default-header "Project AgendaSource"))
	  :unnarrowed t)
	 ("p" "Person" plain
	  "%?"
	  :target (file+head ,default-file ,(concat default-header "Person"))
	  :unnarrowed t)
	 ("b" "Book" plain
	  "- Author: %?\n- Notes: \n\n* Summary\n\n* Chapters\n\n* Comments\n"
	  :target (file+head ,default-file ,(concat default-header "Book"))
	  :unnarrowed t)
	 ("c" "Company" plain
	  "- Website: %?\n- Tech stack: \n\n* Notes\n\n* Applications\n"
	  :target (file+head ,default-file ,(concat default-header "Company AgendaSource"))
	  :unnarrowed t)
	 ("j" "Trip" plain
	  "* Flights/travel\n\n* Accommodation\n\n* Comments\n"
	  :target (file+head ,default-file ,(concat default-header "Trip AgendaSource"))
	  :unnarrowed t)
	 ("l" "Location" plain
	  "* Comments\n%?\n* Visits\n\n* Ice cream\n\n* Restaurants\n\n* Points of interest\n"
	  :target (file+head ,default-file ,(concat default-header "Location"))
	  :unnarrowed t))))
    (org-roam-dailies-capture-templates
     (let ((default-file "%<%Y-%m-%d>.org")
	   (default-header "#+title: %<%Y-%m-%d>\n\n* Tasks [/]\n\n* Notes\n"))
       `(("t" "Task" checkitem ""
	  :target (file+head+olp ,default-file ,default-header ("Tasks")))
	 ("n" "Note" entry "** %?"
	  :target (file+head+olp ,default-file ,default-header ("Notes")))
	 ("d" "Direct" plain "%?"
	  :target (file+head ,default-file ,default-header)))))
    :bind (("s-r" . org-roam-node-find)
	   ("s-c" . nil)
	   ("s-c i" . nrm/roam-inbox-capture)
	   ("s-c t" . org-roam-dailies-capture-today)
	   ("s-c d" . org-roam-dailies-capture-date)
	   ("s-g" . nil)
	   ;; Go to the file directly, skipping the capture prompt
	   ("s-g t" . (lambda () (interactive) (org-roam-dailies-goto-today "d")))
	   ("s-g d" . (lambda () (interactive) (org-roam-dailies-goto-date nil "d")))
	   :map org-mode-map
	   ("C-c i" . org-roam-node-insert)
	   ("C-c b" . org-roam-buffer-toggle)
	   ("s-n" . org-roam-dailies-goto-next-note)
	   ("s-p" . org-roam-dailies-goto-previous-note))
    :config
    (org-roam-db-autosync-enable)
    (defun nrm/roam-inbox-capture ()
      (interactive)
      (org-roam-capture-
       :node (org-roam-node-create)
       :templates '(("i" "Inbox" entry "* SCOPE %?\n%U\n%a"
		     :target (file+head "Inbox.org" "#+title: Inbox\n#+category: Inbox\n#+filetags: AgendaSource"))))))

#+end_src

** File structure

- Generate `org-agenda-files` based on the Roam files that are tagged as `AgendaSource`, and add my legacy (plain org) GTD setup.
- Define refiling targets.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Org file structure
  ;; _____________________________________________________________________________

  (setq org-directory "~/gtd")
  (set-register ?g (cons 'file (concat org-directory "/actions.org")))

  (defun nrm/roam-list-files-with-tag (tag-name)
    (mapcar #'org-roam-node-file
	    (seq-filter
	     (lambda (elt) (member tag-name (org-roam-node-tags elt)))
	     (org-roam-node-list))))

  (defun nrm/generate-org-agenda-files ()
    (interactive)
    (setq org-agenda-files (nrm/roam-list-files-with-tag "AgendaSource"))
    (add-to-list 'org-agenda-files "actions.org"))

  ;; Generate the agenda file list when Emacs starts and also whenever a new Roam file is created (aprox)
  (nrm/generate-org-agenda-files)
  (add-hook 'org-capture-after-finalize-hook #'nrm/generate-org-agenda-files)

  (defun nrm/generate-org-refile-targets ()
    (interactive)
    ;; Only this variable needs to be regenerated
    (setq roam-files (directory-files org-roam-directory t "org$"))
    (setq org-refile-targets
	  '((roam-files :maxlevel . 3)
	    ("actions.org" :maxlevel . 3))))

  ;; Generate the refile target list when Emacs starts and also whenever a new Roam file is created (aprox)
  (nrm/generate-org-refile-targets)
  (add-hook 'org-capture-after-finalize-hook #'nrm/generate-org-refile-targets)

#+end_src

** Agenda configuration

Create custom agenda commands to:
- Show my schedule and next actions;
- Show tasks organised by workflow status.

#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
	'(("d" "Dashboard"
	   ((agenda "" ((org-deadline-warning-days 7)))
	    (todo "REVIEW"
		  ((org-agenda-overriding-header "In Review")
		   (org-agenda-files org-agenda-files)))
	    (todo "TODO"
		  ((org-agenda-overriding-header "Ready for Work")
		   (org-agenda-files org-agenda-files)))
	    (todo "SCOPE"
		  ((org-agenda-overriding-header "In Scoping")
		   (org-agenda-files org-agenda-files)))))

	  ("w" "Workflow Status"
	   ((todo "WAIT"
		  ((org-agenda-overriding-header "Waiting")
		   (org-agenda-files org-agenda-files)))
	    (todo "REVIEW"
		  ((org-agenda-overriding-header "In Review")
		   (org-agenda-files org-agenda-files)))
	    (todo "TODO"
		  ((org-agenda-overriding-header "Ready for Work")
		   (org-agenda-files org-agenda-files)))
	    (todo "SCOPE"
		  ((org-agenda-overriding-header "In Scoping")
		   (org-agenda-files org-agenda-files)))
	    (todo "BACKLOG"
		  ((org-agenda-overriding-header "Project Backlog")
		   (org-agenda-files org-agenda-files)))))))

#+end_src

* Shell

** vterm

I choose to use [[https://github.com/akermu/emacs-libvterm/][vterm]] because it is fast, compatible with my usual terminal setup, and it supports interactive commands.

The command `M-x multi-vterm` lets me easily create multiple terminals.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Shell
  ;; _____________________________________________________________________________

  (use-package vterm
    :commands vterm
    :hook (vterm-mode . goto-address-mode)
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
    (setq vterm-max-scrollback 10000))

  (global-set-key (kbd "s-t") 'vterm)

  (use-package multi-vterm)
#+end_src

* TRAMP

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; TRAMP
  ;; _____________________________________________________________________________

  (use-package tramp
    :custom
    (tramp-default-method "ssh")
    ;; Change this to get, for example, error messages only
    (tramp-verbose 3)
    ;; Load controlmaster options from ~/.ssh/config directly
    (tramp-use-ssh-controlmaster-options nil)
    :config
    (add-to-list 'tramp-connection-properties
		 (list "/ssh:" "direct-async-process" t)))
#+end_src

* Programming

** Rainbow delimiters

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Rainbow delimiters
  ;; _____________________________________________________________________________

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    :config
    (set-face-background 'rainbow-delimiters-base-error-face "#e6194b")
    (set-face-foreground 'rainbow-delimiters-depth-1-face "#e6194b")
    (set-face-foreground 'rainbow-delimiters-depth-2-face "#f58231")
    (set-face-foreground 'rainbow-delimiters-depth-3-face "#ffe119")
    (set-face-foreground 'rainbow-delimiters-depth-4-face "#bfef45")
    (set-face-foreground 'rainbow-delimiters-depth-5-face "#aaffc3")
    (set-face-foreground 'rainbow-delimiters-depth-6-face "#42d4f4")
    (set-face-foreground 'rainbow-delimiters-depth-7-face "#4363d8")
    (set-face-foreground 'rainbow-delimiters-depth-8-face "#911eb4")
    (set-face-foreground 'rainbow-delimiters-depth-9-face "#f032e6"))

#+end_src

** Compilation

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Compilation
  ;; _____________________________________________________________________________

  (defun nrm/compilation-hook ()
    (when (not (get-buffer-window "*compilation*"))
      (save-selected-window
	(save-excursion
	    (switch-to-buffer "*compilation*")))))

  (add-hook 'compilation-mode-hook 'nrm/compilation-hook)
  (add-hook 'compilation-mode-hook 'goto-address-mode)

  (setq compilation-scroll-output t)

#+end_src

** Flymake

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Flymake
  ;; _____________________________________________________________________________

  (use-package flymake
    :bind
    (:map flymake-mode-map
	   ("M-n" . flymake-goto-next-error)
	   ("M-p" . flymake-goto-prev-error)))

#+end_src

** Eglot

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Eglot
  ;; _____________________________________________________________________________

  (use-package eglot
    :init
    (dolist (hook '(go-mode-hook python-mode-hook java-mode-hook))
      (add-hook hook 'eglot-ensure))
    :custom
    (eglot-autoshutdown t)
    (eglot-sync-connect nil))

#+end_src

** Go

This needs some cleaning up. I accumulated this configuration while working with Go a lot. I am not currently developing in Go, so fixing this is not urgent.

For this to work, add GOROOT and GOPATH to PATH in ~/.profile (or equivalent).

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; go-mode
  ;; _____________________________________________________________________________

  (use-package go-mode
    :defer t
    :mode ("\\.go\\'" . go-mode)
    :init
    (setq compile-command "echo Formating... && go fmt && echo Building... && go build -v && echo Testing... && go test -v")
    (setq compilation-read-command nil)
    (add-hook 'before-save-hook 'gofmt-before-save))

  ;; Configure goimports
  ;; (setq gofmt-command "<path to goimports, eg ~/bin/goimports>")

#+end_src

* File formats

** CSV

Toggle `csv-align-mode` to display columns aligned, without changing the underlying file.

#+begin_src emacs-lisp
    ;; _____________________________________________________________________________
    ;; csv-mode
    ;; _____________________________________________________________________________

    (use-package csv-mode
      :mode ("\\.csv\\'" . csv-mode)
      :custom (csv-invisibility-default nil))

#+end_src

* Beancount

Follow the instructions in my beans repo to install all the needed Python packages.

#+begin_src emacs-lisp
  ;; ___________________________________________________________________________
  ;; Beancount
  ;; ___________________________________________________________________________

  (use-package beancount-mode
    :ensure nil
    :mode ("\\.beancount\\'" . beancount-mode)
    :init
    (add-hook 'beancount-mode-hook #'outline-minor-mode)
    :bind
    (:map beancount-mode-map
	  ("C-c C-n" . outline-next-visible-heading)
	  ("C-c C-p" . outline-previous-visible-heading)))

  ;; Copied from beancount-mode/etc/emacsrc
  (defun beancount-format-file ()
    (interactive)
    (let ((line-no (line-number-at-pos)))
      (call-process-region (point-min) (point-max) "bean-format" t (current-buffer))
      (goto-line line-no)
      (recenter)))

  (set-register ?b (cons 'file "~/beans"))

#+end_src

* Local config

Load configuration that is specific to the local machine. For example, functions that are only useful on my work machine.

#+begin_src emacs-lisp
  ;; ___________________________________________________________________________
  ;; Local config
  ;; ___________________________________________________________________________

  (let ((local-config "~/local-config.el"))
   (when (file-exists-p local-config)
     (load-file local-config)))

#+end_src

* End

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Finish loading config
  ;; _____________________________________________________________________________

  (toggle-debug-on-error)

  (message "Finished loading config at %s" (format-time-string "%T"))
  (message "Emacs loaded in %s with %d garbage collections."
	   (format "%.2f seconds"
		   (float-time
		    (time-subtract after-init-time before-init-time)))
	   gcs-done)
#+end_src
