#+title: Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :results output silent

* About

My very own Emacs configuration. Inspired by [[https://github.com/daviwil/emacs-from-scratch][Emacs from scratch]], customised to what I actually need.

* Setup

This configuration is designed to bootstrap itself, but there are a few dependencies that need to be installed first.

Before starting Emacs, install Homebrew (on MacOS), and use it to install:
- ~ispell~, for spell checking
- ~coreutils~, for the ~gls~ CLI command, which is an alternative to ~ls~ that can be used by dired
- ~cmake~ and ~libtool~, to compile dependencies of vterm and Roam
- ~gopls~, which is an LSP for Go, and will install ~go~ as a dependency
- ~rust~ and ~rust-analyzer~, the Rust language toolchain and LSP, respectively
- ~kotlin-language-server~; does what it says on the tin

#+begin_src shell
brew install ispell coreutils cmake libtool gopls rust rust-analyzer kotlin-language-server
#+end_src

To run binaries compiled from Rust, add ~~/.cargo/bin~ to the ~PATH~ in ~~/.zprofile~.

Instructions on how to set Caps Lock to act as Control are [[https://support.apple.com/en-gb/guide/mac-help/mchlp1011/mac][here]]. Remember to do this for each machine and keyboard combination.

Run ~M-x nerd-icons-install-fonts~ to download and install icons used by the ~nerd-icons~ package.

The ~multi-vterm~ package seems to cause problems when bootstrapping the configuration. I'm not sure why, but manually deleting and reinstalling the package (through ~list-packages~) seems to fix it.

Beancount mode isn't available through ELPA/MELPA, so it must be cloned from Github. To make it accessible to use-package, run ~M-x package-install-file ~/beancount-mode/beancount.el~.

#+begin_src shell
git clone git@github.com:beancount/beancount-mode.git
#+end_src

* Start

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Start loading config
  ;; _____________________________________________________________________________

  (toggle-debug-on-error)

  (setq inhibit-startup-message t)

  (switch-to-buffer "*Messages*")
  (message "Started loading config at %s" (format-time-string "%T"))
#+end_src

* Package management

- Set up the MELPA archive.
- Make sure that use-package is installed, so that it can be used to install all the other packages.
- Always ensure packages to avoid confusion over what is or isn't installed.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Package management
  ;; _____________________________________________________________________________

  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Shortcuts

Settings and key bindings that make common actions faster.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Shortcuts
  ;; _____________________________________________________________________________

  ;; Make it easier to access emacs config
  (set-register ?e (cons 'file "~/.emacs.d/README.org"))

  ;; Cycle through buffers easily
  (global-set-key (kbd "s-<left>") 'previous-buffer)
  (global-set-key (kbd "s-<right>") 'next-buffer)

  ;; Cycle through windows easily
  (defun nrm/switch-to-prev-window ()
    (interactive)
    (other-window -1))
  (global-set-key (kbd "C-<tab>") 'other-window)
  (global-set-key (kbd "C-S-<tab>") 'nrm/switch-to-prev-window)

  ;; Simplify yes-or-no prompts
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; On MacOS, make the right option key not act as meta, to let me type characters that need option
  (setq ns-right-alternate-modifier 'none)

  ;; Tweak recentering to be more comfortable
  (setq recenter-positions '(middle 0.1 0.9))
#+end_src

* Appearance

Make Emacs look fabulous :sparkles:

** Vanilla Emacs config

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Appearance
  ;; _____________________________________________________________________________

  (setq ring-bell-function 'ignore)

  (tool-bar-mode -1)
  (column-number-mode)
  (global-display-line-numbers-mode)
  (global-visual-line-mode)

  (add-to-list 'default-frame-alist '(alpha . (95 . 80)))
  (add-to-list 'default-frame-alist '(fullscreen . fullheight))
  (add-to-list 'default-frame-alist '(width . 160))
#+end_src

** Themes and fonts

I spent more time than I'd like to admit tinkering with these.

#+begin_src emacs-lisp
  (use-package ef-themes
    :config
    (load-theme 'ef-duo-dark t))

  (use-package fontaine
    :custom
    (fontaine-presets
     '((regular
        :default-family "Menlo"
        :default-height 135)))
    :config
    (fontaine-set-preset 'regular))
#+end_src

** Wrapping

Make buffers easier to read by visually wrapping lines early – without actually changing the contents.

#+begin_src emacs-lisp
  (use-package visual-fill-column
    :hook (org-mode . visual-fill-column-mode)
    :custom
    (visual-fill-column-width 120)
    (visual-fill-column-center-text nil)
    (visual-fill-column-enable-sensible-window-split t)
    :config
    (advice-add 'text-scale-adjust :after #'visual-fill-column-adjust))

#+end_src

** Icons

Icons that make several modes prettier, but don't change functionality.

#+begin_src emacs-lisp
  (use-package nerd-icons)

  (use-package nerd-icons-dired
    :hook (dired-mode . nerd-icons-dired-mode))

  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

  (use-package nerd-icons-completion
    :config
    (nerd-icons-completion-mode))

  (use-package nerd-icons-corfu)
#+end_src

** Extras

The Doom modeline displays some useful information without much configuration.

Having Nyan cat tell me where I am in the buffer ensures I don't miss "more modern IDEs".

Golden ratio is sometimes useful to resize windows when quickly switching between them – but I find it annoying as a default on a wide screen.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-buffer-encoding nil))

  (use-package nyan-mode
    :config (nyan-mode 1))

  (use-package golden-ratio)
#+end_src

** Presentations

Olivetti is used to centre a buffer's contents in a window.

Logos does two things:
- makes it easier to navigate files according to a logical outline structure; and
- provides a "focus mode" that strips down a lot of the UI.

Combining the two is a simple way of presenting the contents of a buffer.

Olivetti doesn't play well with ~visual-fill-column-mode~, so I disable it automatically when I go into the focus mode. Technically I should disable it when going into ~olivetti~ instead, but I never use ~olivetti~ on its own, so I'm happy with this for now.

Doing a presentation messes up a bunch of the minor modes I use, so the simpler way to get out of it is to run the ~revert-buffer~ command.

#+begin_src emacs-lisp
  (use-package olivetti
    :custom
    (olivetti-body-width 0.7)
    (olivetti-minimum-body width 80))

  (use-package logos
    :hook (logos-focus-mode . nrm/present-funs)
    :custom
    (logos-outlines-are-pages t)
    :config
    (setq-default logos-hide-cursor t
                  logos-hide-mode-line t
                  logos-hide-buffer-boundaries t
                  logos-hide-fringe t
                  logos-variable-pitch nil
                  logos-buffer-read-only t
                  logos-olivetti t)
    (defun nrm/present-funs ()
      (visual-fill-column-mode 0)
      (display-line-numbers-mode 0))
    :bind
    ("C-x n n" . logos-narrow-dwim)
    ("C-x ]" . logos-forward-page-dwim)
    ("C-x [" . logos-backward-page-dwim)
    (:map logos-focus-mode-map
          ("<right>" . logos-forward-page-dwim)
          ("<left>" . logos-backward-page-dwim)))
#+end_src

* Writing

Utilities for writing in natural languages.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Writing
  ;; _____________________________________________________________________________

  ;; Natural language formatting and spelling
  (setq sentence-end-double-space nil)
  (setq ispell-program-name "/opt/homebrew/bin/ispell")
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+end_src

* Completion

** Completing read framework

A set of complementary packages that provide minibuffer completion. I saw this set referred to as the MOVEC pentagram.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Completion
  ;; _____________________________________________________________________________

  ;; VERTical Interactive COmpletion - update the minibuffer completions while typing
  (use-package vertico
    :config
    (vertico-mode 1)
    :custom
    (vertico-count 20)
    (vertico-cycle t))

  ;; Order minibuffer completions by recency
  (savehist-mode 1)

  ;; Rich annotations in the minibuffer
  (use-package marginalia
    :config
    (marginalia-mode 1))

  ;; Out of order pattern matching completion
  ;; Style dispatchers note: affix ! to invert match; affix & to match annotation instead of candidate
  (use-package orderless
    :custom
    (completion-styles '(orderless basic)))

  ;; Enhanced versions of builtin search and navigation commands
  (use-package consult
    :custom
    (consult-line-start-from-top t)
    :config
    (defun nrm/consult-grep-dwim ()
      (interactive)
      (if (or (vc-root-dir)
              (derived-mode-p 'magit-section-mode))
          (consult-git-grep)
        (consult-grep)))
    :bind (;; Prefix mnemonic: "alt search"
           ;; Recursive grep
           ("M-s M-g" . nrm/consult-grep-dwim)
           ;; Search for file names recursively
           ("M-s M-f" . consult-find)
           ;; Search through the outline (headings) of the buffer
           ("M-s M-o" . consult-outline)
           ;; Search through the imenu items of the buffer
           ("M-s M-i" . consult-imenu)
           ;; Search the current buffer
           ("C-s" . consult-line)
           ;; Switch to another buffer, bookmark, or recently opened file
           ;; Filters: b buffers; SPC hidden buffers; * modified buffers; f recent files; r registers; m bookmarks
           ("C-x b" . consult-buffer)
           ;; Interactively select item to yank from kill-ring
           ("C-M-y" . consult-yank-from-kill-ring)
           ;; Goto position at line:column
           ("s-l" . consult-goto-line)))

  ;; Enable recent files as a virtual buffer source for consult-buffer
  (recentf-mode 1)

  ;; Actions based on context
  (use-package embark
    :bind
    ("C-." . embark-act)
    ("s-." . embark-dwim)
    (:map minibuffer-local-map
          ;; Retains minibuffer behaviour
          ("C-c C-c" . embark-collect)
          ;; Exports contents to a buffer in an appropriate major mode
          ("C-c C-e" . embark-export)))

  (use-package embark-consult)
#+end_src

** Completion at point

Text completion for source code and natural language.

#+begin_src emacs-lisp

  ;; UI for completion at point; use M-SPC to insert a separator
  (use-package corfu
    :config
    (global-corfu-mode 1)
    (corfu-history-mode 1)
    (corfu-popupinfo-mode 1)
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
    :custom
    (corfu-auto t)
    (corfu-cycle t)
    (corfu-preview-current nil)
    (corfu-popupinfo-delay (cons 1.0 0.1)))

  ;; Extra capfs
  (use-package cape
    :config
    ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file))
#+end_src

** which-key

When typing a key bind prefix, WK mode expands the minibuffer to display commands under that prefix.

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.5))
#+end_src

* Built-in mode improvements

** Dired

Toggle dired omit mode with "C-x M-o". This mode hides "uninteresting" files such as backup and dot files. This is better than hiding files through options passed to the ls command because it lets me quickly toggle the mode when I need to look at dot files, for example.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Dired
  ;; _____________________________________________________________________________

  (use-package dired
    ;; dired is not a -package.el package, so don't attempt to install it.
    :ensure nil
    :hook (dired-mode . dired-omit-mode)
    :bind
    (:map dired-mode-map
          ("b" . dired-up-directory))
    :custom
    (insert-directory-program "gls")
    (dired-listing-switches "-lah --group-directories-first")
    (dired-kill-when-opening-new-dired-buffer t))

  (use-package dired-x
    ;; Also not a proper -package.el.
    :ensure nil
    :config
    (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$")))

  (use-package wdired
    :custom
    (wdired-use-dired-vertical-movement t))
#+end_src

** IBuffer

- Replace ~list-buffers~ with the more powerful, built-in ~ibuffer~.
- By default, group buffers by project.
- Make it easier to collapse groups.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; IBuffer
  ;; _____________________________________________________________________________

  (use-package ibuffer
    ;; ibuffer is not a -package.el package, so don't attempt to install it.
    :ensure nil
    :custom
    (ibuffer-default-sorting-mode 'filename/process)
    (ibuffer-show-empty-filter-groups nil)
    (ibuffer-saved-filter-groups
     (list
      (cons "Projects" (nrm/ibuffer-project-filter-groups))
      '("Types"
        ("Dired" (mode . dired-mode))
        ("Org" (mode . org-mode))
        ("Version control" (derived-mode . magit-section-mode))
        ("Source code" (derived-mode . prog-mode)))))
    :hook
    (ibuffer-mode . (lambda () (ibuffer-switch-to-saved-filter-groups "Projects")))
    :config
    (defun nrm/ibuffer-project-filter-groups ()
      (project--read-project-list)
      (mapcar (lambda (project)
                (let ((root-dir (car project))
                      (name (file-name-nondirectory (directory-file-name (car project)))))
                  ;; Some modes list their default-directory as relative paths, others as absolute paths
                  `(,name (or
                           (directory . ,root-dir)
                           (directory . ,(expand-file-name root-dir))))))
              project--list))
    (defun nrm/ibuffer-toggle-current-group()
      (interactive)
      (ibuffer-forward-filter-group)
      (ibuffer-backward-filter-group)
      (ibuffer-toggle-filter-group))
    :bind
    (("C-x C-b" . ibuffer)
     :map ibuffer-mode-map
     ("<tab>" . nrm/ibuffer-toggle-current-group)))
#+end_src

** Ediff

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Ediff
  ;; _____________________________________________________________________________

  (use-package ediff
    :custom
    (ediff-keep-variants nil)
    (ediff-make-buffers-readonly-at-startup t)
    (ediff-split-window-function 'split-window-horizontally)
    (ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src

** wgrep

- Writable grep results.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Wgrep
  ;; _____________________________________________________________________________

  (use-package wgrep)
#+end_src

* Magit

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Magit
  ;; _____________________________________________________________________________

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    (magit-diff-refine-hunk 'all)
    :bind ("C-x g" . magit-status))
#+end_src

* Org

** org-mode and UI

Configuration that I want to apply to every Org buffer by default, and my task tracking workflow.

My workflow has changed over the years:
- It was originally based on the methodology from "Getting Things Done", by David Allen.
- I decided to tag tasks after seeing the custom agenda commands in [[https://systemcrafters.net/org-mode-productivity/custom-org-agenda-views/][this post]] from System Crafters.
- I decided to represent tasks that are blocked/waiting using tags instead of todo keywords after reading the comments in [[https://www.reddit.com/r/emacs/comments/twlmxy/open_ended_question_what_are_your_orgtodokeywords/][this Reddit post]].

I organise my tasks as follows:
- I use todo keywords to mark where in the workflow the task is: todo -> in progress -> done.
- I tag every task with an effort level and the type of task it is.
  - I also use tags to mark whether a task is blocked on something else I must do first, or waiting on someone else.
- I use the built-in priority system to mark tasks that should be worked on soon, so they are more visible in my agenda views. Most tasks don't have an assigned priority.


#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Org
  ;; _____________________________________________________________________________

  (use-package org
    :bind
    ("\C-cl" . org-store-link)
    ("s-a" . org-agenda)
    ("s-c" . org-capture)
    :hook (org-mode . org-indent-mode)
    :custom
    (org-ellipsis " ▾")
    (org-startup-folded 'content)
    (org-todo-keywords '((sequence "TODO(t)" "PROG(p)" "|" "DONE(d)" "CANCELLED(c)")))
    (org-tag-alist
     '((:startgroup)
       ("@low" . ?l) ("@medium" . ?m) ("@high" . ?h)
       (:endgroup)
       (:startgroup)
       ("@planning" . ?p)
       ("@research" . ?r)
       ("@writing" . ?w)
       ("@coding" . ?c)
       ("@errand" . ?e)
       ("@buy" . ?b)
       (:endgroup)
       (:startgroup)
       ("@blocked" . ?z)
       ("@waiting" . ?x)
       (:endgroup)))
    ;; Record the date but not the time of day when a todo item is done
    (org-log-done 'time)
    (org-log-done-with-time nil)
    (org-log-into-drawer t)
    ;; Always add blank lines before inserted headings, never before list items
    (org-blank-before-new-entry '((heading . t) (plain-list-item . nil)))
    ;; Allow items to be refiled to the top level in a file, rather than under another headline
    (org-refile-use-outline-path 'file)
    ;; Show file and headline paths in the refile completion buffer
    (org-outline-path-complete-in-steps nil)
    ;; Refile targets to the top of files and headlines, rather than the end
    (org-reverse-note-order t)
    :config
    ;; Save all org buffers after refiling, to prevent entries being lost if Emacs crashes
    (advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers))))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Org agenda

#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure org
    :bind
    (:map org-agenda-mode-map
          ("<return>" . nrm/org-agenda-switch-and-narrow))
    :custom
    (org-agenda-custom-commands
     '(("d" "Dashboard"
        ((agenda "" ((org-agenda-span 'week)))
         (todo "PROG" ((org-agenda-overriding-header "In progress")))
         (tags-todo "-TODO=\"PROG\"+PRIORITY=\"A\"" ((org-agenda-overriding-header "Urgent tasks")))))
       ("n" "Non-blocked"
        ((tags-todo "-@blocked")))
       ("p" "Planning"
        ((tags-todo "+@planning" ((org-agenda-overriding-header "Planning tasks")))
         (tags-todo "-@low-@medium-@high" ((org-agenda-overriding-header "Untagged tasks")))))
       ("q" "Quick wins"
        ((tags-todo "+@low-@buy")))))
    ;; Display done items with their completion date
    (org-agenda-start-with-log-mode t)
    (org-agenda-log-mode-items '(closed clock state))
    (org-agenda-window-setup "current-window")
    ;; If an entry has a TODO label, don't check its children
    (org-agenda-todo-list-sublevels nil)
    :hook
    (org-agenda-mode . (lambda () (display-line-numbers-mode -1)))
    :config
    (defun nrm/org-agenda-switch-and-narrow ()
      (interactive)
      (org-agenda-switch-to)
      (org-narrow-to-subtree)))
#+end_src

** Babel

How meta!

- Automatically tangle this file on save to generate init.el.
- Don't ask for permission to run code in org babel.
- ~org-tempo~ enables expanding snippets into structures, such as code blocks for specific languages.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Babel
  ;; _____________________________________________________________________________

  ;; Automatically tangle the README.org file on save
  (defun nrm/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/README.org"))
      (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'nrm/org-babel-tangle-config)))

  (setq org-confirm-babel-evaluate nil)

  (use-package org-tempo
    :ensure nil
    :config
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell")))
#+end_src

** Roam

To make a header in a file into its own node, run ~org-id-get-create~.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Roam
  ;; _____________________________________________________________________________

  (use-package org-roam
    :demand
    :custom
    (org-roam-directory "~/roam")
    (org-roam-dailies-directory "daily-work")
    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* %?" :target
       (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+STARTUP: showeverything\n"))))
    (org-roam-node-display-template
     (concat "${title:*} " (propertize "${tags:*}" 'face 'org-tag)))
    (org-roam-capture-templates
     (let ((default-file "roam-${slug}.org")
           (default-header "#+title: ${title}\n#+category: ${title}\n#+date: %U\n#+filetags: "))
       `(("t" "Topic" plain
          "%?"
          :target (file+head ,default-file ,(concat default-header ":Topic:"))
          :unnarrowed t)
         ("a" "Project" plain
          "* Goals\n%?\n* Actions\n"
          :target (file+head ,default-file ,(concat default-header ":Project:AgendaSource:"))
          :unnarrowed t)
         ("p" "Person" plain
          "%?"
          :target (file+head ,default-file ,(concat default-header ":Person:"))
          :unnarrowed t)
         ("b" "Book" plain
          "- Author: %?\n- Notes: \n\n* Summary\n\n* Chapters\n\n* Comments\n"
          :target (file+head ,default-file ,(concat default-header ":Book:"))
          :unnarrowed t)
         ("c" "Company" plain
          "- Website: %?\n- Tech stack: \n\n* Notes\n\n* Applications\n"
          :target (file+head ,default-file ,(concat default-header ":Company:"))
          :unnarrowed t)
         ("j" "Trip" plain
          "* Flights/travel\n\n* Accommodation\n\n* Comments\n"
          :target (file+head ,default-file ,(concat default-header ":Trip:AgendaSource:"))
          :unnarrowed t)
         ("l" "Location" plain
          "* Comments\n%?\n* Visits\n\n* Ice cream\n\n* Restaurants\n\n* Points of interest\n"
          :target (file+head ,default-file ,(concat default-header ":Location:"))
          :unnarrowed t))))
    :bind (("s-r" . org-roam-node-find)
           ;; Go to the file directly, skipping the capture prompt
           ("s-g" . nil)
           ("s-g t" . (lambda () (interactive) (org-roam-dailies-goto-today "d")))
           ("s-g d" . (lambda () (interactive) (org-roam-dailies-goto-date nil "d")))
           :map org-mode-map
           ("C-c i" . org-roam-node-insert)
           ("C-c b" . org-roam-buffer-toggle)
           ("s-n" . org-roam-dailies-goto-next-note)
           ("s-p" . org-roam-dailies-goto-previous-note))
    :config
    (org-roam-db-autosync-enable))
#+end_src

** File structure

- Define refiling targets as all Roam files.
- Generate default ~org-agenda-files~ based on the Roam files with a specific tag:
  - 'AgendaSource' for personal files.
  - 'Work' for work files.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Org file structure
  ;; _____________________________________________________________________________

  (defun nrm/generate-org-refile-targets ()
    (interactive)
    ;; Only this variable needs to be regenerated
    (setq roam-files (directory-files org-roam-directory t "org$"))
    (setq org-refile-targets
          '((roam-files :maxlevel . 3))))

  ;; Generate the refile target list when Emacs starts and also whenever a new Roam file is created (aprox)
  (nrm/generate-org-refile-targets)
  (add-hook 'org-capture-after-finalize-hook #'nrm/generate-org-refile-targets)

  ;; _____________________________________________________________________________
  ;; Org agenda
  ;; _____________________________________________________________________________

  (defun nrm/roam-list-files-with-tag (tag-name)
    (delete-dups (mapcar #'org-roam-node-file
                         (seq-filter
                          (lambda (elt) (member tag-name (org-roam-node-tags elt)))
                          (org-roam-node-list)))))

  (setq nrm/org-agenda-generating-tag "AgendaSource")

  (defun nrm/generate-org-agenda-files ()
    (interactive)
    (setq org-agenda-files (nrm/roam-list-files-with-tag nrm/org-agenda-generating-tag)))

  (defun nrm/toggle-org-agenda-files ()
    (interactive)
    (if (string= nrm/org-agenda-generating-tag "AgendaSource")
        (setq nrm/org-agenda-generating-tag "Work")
      (setq nrm/org-agenda-generating-tag "AgendaSource"))
    (message "Agenda files now generated by the tag: %s" nrm/org-agenda-generating-tag)
    (nrm/generate-org-agenda-files))

  ;; Generate the agenda file list when Emacs starts and also whenever a new Roam file is created (aprox)
  (nrm/generate-org-agenda-files)
  (add-hook 'org-capture-after-finalize-hook #'nrm/generate-org-agenda-files)

  ;; _____________________________________________________________________________
  ;; Org capture
  ;; _____________________________________________________________________________

  (setq org-capture-templates
        '(("i" "Inbox" entry (file "~/roam/Inbox.org") "* TODO %?\n%U" :empty-lines 1)
          ("c" "Context" entry (file "~/roam/Inbox.org") "* TODO %?\n%U\n%a" :empty-lines 1)
          ("w" "Work")
          ("wi" "Inbox" entry (file "~/roam/Workbox.org") "* TODO %?\n%U" :empty-lines 1)
          ("wc" "Context" entry (file "~/roam/Workbox.org") "* TODO %?\n%U\n%a" :empty-lines 1)))
#+end_src

* Shell

** vterm

I choose to use [[https://github.com/akermu/emacs-libvterm/][vterm]] because it is fast, compatible with my usual terminal setup, and it supports interactive commands.

The command ~M-x multi-vterm~ lets me easily create multiple terminals.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Shell
  ;; _____________________________________________________________________________

  (use-package vterm
    :bind ("s-t" . vterm)
    :hook (vterm-mode . goto-address-mode)
    :config
    (setq vterm-max-scrollback 10000))

  (use-package multi-vterm)
#+end_src

* TRAMP

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; TRAMP
  ;; _____________________________________________________________________________

  (use-package tramp
    :custom
    (tramp-default-method "ssh")
    ;; Change this to get, for example, error messages only
    (tramp-verbose 3)
    ;; Load controlmaster options from ~/.ssh/config directly
    (tramp-use-ssh-controlmaster-options nil)
    :config
    (add-to-list 'tramp-connection-properties
                 (list "/ssh:" "direct-async-process" t)))
#+end_src

* Programming

** Rainbow delimiters

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Rainbow delimiters
  ;; _____________________________________________________________________________

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    :config
    (set-face-background 'rainbow-delimiters-base-error-face "#e6194b")
    (set-face-foreground 'rainbow-delimiters-depth-1-face "#e6194b")
    (set-face-foreground 'rainbow-delimiters-depth-2-face "#f58231")
    (set-face-foreground 'rainbow-delimiters-depth-3-face "#ffe119")
    (set-face-foreground 'rainbow-delimiters-depth-4-face "#bfef45")
    (set-face-foreground 'rainbow-delimiters-depth-5-face "#aaffc3")
    (set-face-foreground 'rainbow-delimiters-depth-6-face "#42d4f4")
    (set-face-foreground 'rainbow-delimiters-depth-7-face "#4363d8")
    (set-face-foreground 'rainbow-delimiters-depth-8-face "#911eb4")
    (set-face-foreground 'rainbow-delimiters-depth-9-face "#f032e6"))
#+end_src

** Compilation

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Compilation
  ;; _____________________________________________________________________________

  (defun nrm/switch-to-compilation-buffer-hook (buffer status)
    (switch-to-buffer buffer)
    (delete-other-windows))

  (add-hook 'compilation-finish-functions 'nrm/switch-to-compilation-buffer-hook)
  (add-hook 'compilation-mode-hook 'goto-address-mode)

  (setq compilation-scroll-output t)
#+end_src

** Flymake

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Flymake
  ;; _____________________________________________________________________________

  (use-package flymake
    :bind
    (:map flymake-mode-map
          ("M-n" . flymake-goto-next-error)
          ("M-p" . flymake-goto-prev-error)))
#+end_src

** Eglot

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Eglot
  ;; _____________________________________________________________________________

  (use-package eglot
    :init
    (dolist (hook '(go-mode-hook java-mode-hook kotlin-mode-hook python-mode-hook rust-mode-hook))
      (add-hook hook 'eglot-ensure))
    :custom
    (eglot-autoshutdown t)
    (eglot-sync-connect nil))

#+end_src

** Go

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Go
  ;; _____________________________________________________________________________

  (use-package go-mode
    :defer t
    :mode ("\\.go\\'" . go-mode)
    :hook (go-mode . (lambda ()
                       (setq-local compilation-read-command nil)
                       (setq-local compile-command
                                   (concat
                                    "echo Formating..."
                                    "&& go fmt "
                                    "&& echo Building... "
                                    "&& go build -v "
                                    "&& echo Testing... "
                                    "&& go test -v "))))
    :init
    (add-hook 'before-save-hook 'gofmt-before-save))
#+end_src

** Kotlin

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Kotlin
  ;; _____________________________________________________________________________

  (use-package kotlin-mode
    :hook (kotlin-mode . (lambda ()
                           (setq-local compile-command "./gradlew build")
                           (indent-tabs-mode -1))))
#+end_src

** Rust

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Rust
  ;; _____________________________________________________________________________

  (use-package rustic
    :defer t
    :hook
    (rustic-mode . (lambda ()
                     (setq-local compilation-read-command nil)
                     (setq-local compile-command
                                 (concat
                                  "echo Formatting... "
                                  "&& cargo fmt -- --config imports_granularity=\"Crate\" "
                                  "&& echo Linting... "
                                  "&& cargo clippy --benches --tests --all-features -- -D warnings "
                                  "&& echo Testing... "
                                  "&& cargo test "))))
    :custom
    (rustic-lsp-client 'eglot)
    (rustic-format-display-method 'ignore)
    (rustic-format-trigger 'on-compile))

  (use-package rust-playground)
#+end_src

* File formats

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; File formats
  ;; _____________________________________________________________________________
#+end_src

** CSV

Toggle ~csv-align-mode~ to display columns aligned, without changing the underlying file.

#+begin_src emacs-lisp
  (use-package csv-mode
    :mode ("\\.csv\\'" . csv-mode)
    :custom (csv-invisibility-default nil))
#+end_src

** JSON

#+begin_src emacs-lisp
  (use-package json-mode
    :custom (js-indent-level 2))
#+end_src


* Beancount

Follow the instructions in my beans repo to install all the needed Python packages.

#+begin_src emacs-lisp
  ;; ___________________________________________________________________________
  ;; Beancount
  ;; ___________________________________________________________________________

  (use-package beancount-mode
    :ensure nil
    :mode ("\\.beancount\\'" . beancount-mode)
    :init
    (add-hook 'beancount-mode-hook #'outline-minor-mode)
    :bind
    (:map beancount-mode-map
          ("C-n" . outline-next-visible-heading)
          ("C-p" . outline-previous-visible-heading)))

  ;; Copied from beancount-mode/etc/emacsrc
  (defun beancount-format-file ()
    (interactive)
    (let ((line-no (line-number-at-pos)))
      (call-process-region (point-min) (point-max) "bean-format" t (current-buffer))
      (goto-line line-no)
      (recenter)))
#+end_src

* Local config

Load configuration that is specific to the local machine. For example, functions that are only useful on my work machine.

#+begin_src emacs-lisp
  ;; ___________________________________________________________________________
  ;; Local config
  ;; ___________________________________________________________________________

  (let ((local-config "~/local-config.el"))
    (when (file-exists-p local-config)
      (load-file local-config)))
#+end_src

* End

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Finish loading config
  ;; _____________________________________________________________________________

  ;; (toggle-debug-on-error)

  (message "Finished loading config at %s" (format-time-string "%T"))
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done)
#+end_src
