#+title: Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :results output silent

* About

My very own Emacs configuration. Based on [[https://github.com/daviwil/emacs-from-scratch][Emacs from scratch]], customised to what I actually need.

I keep some comments in the Emacs Lisp snippets, as well as comments in the org file, so that the init.el file is easier to navigate.

Instructions on how to set Caps Lock to act as Control are [[https://support.apple.com/en-gb/guide/mac-help/mchlp1011/mac][here]]. Remember to do this for each machine and each connected keyboard!

Some of the things I want to do with my configuration:

- [X] Rename org files
- [X] Fix org-mode capture
- [X] Org mode changes
  - Bullets
  - Ellypsis
- [X] Rainbow delimiters
- [X] Use Org Babel to document Emacs config
- [X] Ivy + ivy-rich + which-key + counsel + helpful
- [X] Shell mode
- [X] dad-joke
- [X] Prescient
- [X] Homebrew
- [ ] Configure list-buffers
- [ ] Replace tasks and projects with actions
- [ ] Make counsel-find-file not show ./ and ../
- [ ] Tune gc cons threshold
- [ ] Replace lsp-mode with eglot
- [ ] imenu
- [ ] Roam
- [ ] Capture notes for a future meeting
- [ ] org-gcal
- [ ] Python mode
- [ ] Beancount mode
- [ ] gnu-elpa-keyring-update
- [ ] Java mode
- [ ] Protobuf mode
- [ ] Learn more about lexical binding in ELisp
- [ ] LaTeX mode
- [ ] LSP optimisations
- [ ] gopls optimisations
  Have a look through the [options available in gopls](https://github.com/golang/tools/blob/master/gopls/doc/emacs.md).

* Package management

- Set up the MELPA archive.
- Make sure that use-package is installed, so that it can be used to install all the other packages.
- Always ensure packages to avoid confusion over what is or isn't installed.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Package management
  ;; _____________________________________________________________________________

  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (package-initialize)

  (unless package-archive-contents
   (package-refresh-contents))

  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Global configuration

Run `M-x all-the-icons-install-fonts` to actually install icons.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Global configuration
  ;; _____________________________________________________________________________

  (setq inhibit-startup-message t)

  ;; Make it easier to access emacs config
  (set-register ?e (cons 'file "~/.emacs.d/README.org"))

  ;; Easy commenting
  (global-set-key (kbd "M-/") 'comment-or-uncomment-region)

  ;; Cycle through buffers easily
  (global-set-key (kbd "s-<left>") 'previous-buffer)
  (global-set-key (kbd "s-<right>") 'next-buffer)

  ;; Cycle through windows easily
  (global-set-key (kbd "C-<tab>") 'other-window)
  (defun switch-to-prev-window ()
    (interactive)
    (other-window -1))
  (global-set-key (kbd "C-S-<tab>") 'switch-to-prev-window)

  ;; Simplify yes-or-no prompts
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Automatically show a Lisp debugger when a command errors
  (toggle-debug-on-error)

  ;; Make the right option key not act as meta, to let me type characters that need option
  (setq ns-right-alternate-modifier 'none)

  ;; Theme and display configuration
  (load-theme 'tango-dark t)
  (column-number-mode)
  (global-display-line-numbers-mode)
  (global-visual-line-mode)

  ;; Icons that can be used by several packages
  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-minor-modes t))

  ;; Natural language formatting and spelling
  (setq sentence-end-double-space nil)
  (setq ispell-program-name "/opt/homebrew/bin/ispell")
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))

#+end_src

* Silly things

Everything else in this configuration serves a purpose. The packages in this section are just for fun. They'll be the first to be sacrificed when Emacs inevitable devours all my memory.

#+begin_src emacs-lisp
  (use-package nyan-mode
    :config (nyan-mode 1))

  (use-package dad-joke)

#+end_src

* Completion

** which-key

When typing a key bind prefix, WK mode expands the minibuffer to display commands under that prefix.

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.5))

#+end_src

** Ivy

Ivy provides completion functions for all interactive functions that require input, such as find-file and switch-buffer.

#+begin_src emacs-lisp
  (use-package ivy
    :demand
    :bind (:map ivy-minibuffer-map
		("TAB" . ivy-alt-done))
    :config
    (setq ivy-initial-inputs-alist nil)
    (ivy-mode 1))

#+end_src

** Swiper

A better version of isearch to fuzzy search in a file.

#+begin_src emacs-lisp
  (use-package swiper
    :demand
    :bind ("C-s" . swiper))
#+end_src

** Counsel

Replaces some common functions with versions that are easier to integrate with Ivy and other packages.

`ivy-rich` provides a better UI for counsel.

#+begin_src emacs-lisp
  (use-package counsel
    :config (counsel-mode 1))

  (use-package ivy-rich
    :config
    (ivy-rich-mode 1))

#+end_src

** Prescient

Sorts completions by recently used and most used, instead of the default sorting order. There is a separate package to do the same with company.

#+begin_src emacs-lisp
  (use-package ivy-prescient
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src
** Helpful

This helpful package replaces the default help functions with ones that provide more information, such as source code snippets.

The functions to describe functions and variables are passed through the counsel commands so that they have completion using counsel and ivy-rich, rather than just Ivy.

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Dired

** Better UI

- Run `brew instal coreutils` on MacOS to get gls, which supports the `--group-directories-first` option.
- Toggle dired omit mode with "C-x M-o". This mode hides "uninteresting" files such as backup and dot files. This is better than hiding files through options passed to the ls command because it lets me quickly toggle the mode when I need to look at dot files, for example.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Dired
  ;; _____________________________________________________________________________

  (use-package dired
    :ensure nil
    :hook (dired-mode . dired-omit-mode)
    :custom ((dired-listing-switches "-lah --group-directories-first"))
    :config
    (require 'dired-x)
    (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
    (setq insert-directory-program "gls"))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

* Magit

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Magit
  ;; _____________________________________________________________________________

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    :bind ("C-x g" . magit-status))

#+end_src

* Org

** org-mode and UI

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Org
  ;; _____________________________________________________________________________

  (use-package org
    :bind
    ("\C-cl" . org-store-link)
    ("s-a" . org-agenda)
    ("s-c" . org-capture)
    :config
    (setq org-ellipsis " ▾"))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Babel

How meta!

- Automatically tangle this file on save to generate init.el.
- Don't ask for permission to run code in org babel.
- Make it easier to insert code snippets.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Babel
  ;; _____________________________________________________________________________

  ;; Automatically tangle the README.org file on save
  (defun nrm/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/README.org"))
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'nrm/org-babel-tangle-config)))

  (setq org-confirm-babel-evaluate nil)

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))

#+end_src

** Workflow

My workflow is based on the Getting Things Done approach.

Tasks can be in one of the following states:
- SCOPE: I want to do something about this, but I haven't decided what. I need to spend some time figuring out what I need to do, if anything.
- BACKLOG: I have identified there is something I want to do/process, but it isn't urgent. It is noted down for later.
- TODO: I have something to do, and I know exactly what it is. This task is ready to be worked on, as soon as I decide to pick it up.
- WAIT: This task is blocked on something, such as receiving an email response. I should check in every once in a while, but there is nothing I can currently do about it.
- REVIEW: I have finished this task, and I should spend some time writing a mini-debrief about it with any notes I want to keep, as well as any next actions.
- DONE: This task is done, reviewed, and archived somewhere.
- CANCELLED: I decided not to do this task.

#+begin_src emacs-lisp
  ;; Workflow states
  (setq org-todo-keywords
	'((sequence "SCOPE(s)" "BACKLOG(b)" "TODO(t)" "WAIT(w)" "REVIEW(r)" "|" "DONE(d)" "CANCELLED(c)")))

  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

#+end_src

** File structure

- All org files used in my gtd setup are in the same directory.
- Tasks and projects each have their own file. This is because I want to keep different levels of detail in the notes I keep for projects and tasks.
- The inbox file is used to quickly capture ideas of things I should do without interrupting my focus.
- The rar and media files are used to keep personal notes.
- I want to easily move org entries between files, but not into the inbox file. The only way into the inbox file should be through capture, and entries in the inbox file should be moved to the appropriate place once I process them.
- Save all org buffers after refiling, to prevent entries being lost if Emacs crashes.

#+begin_src emacs-lisp
  ;; File structure
  (setq org-directory "~/gtd")
  (set-register ?g (cons 'file org-directory))

  (setq org-agenda-files
	'("inbox.org"
	  "meetings.org"
	  "tasks.org"
	  "projects.org"))

  ;; Allow hadlines to be refiled to top level in a file, rather than under another headline
  (setq org-refile-use-outline-path 'file)
  ;; Show file and headline paths in the refile completion buffer
  (setq org-outline-path-complete-in-steps nil)
  ;; Refile targets to the top of files and headlines, rather than the end
  (setq org-reverse-note-order t)

  (setq org-refile-targets
	'(("tasks.org" :maxlevel . 1)
	  ("projects.org" :maxlevel . 1)
	  ("rar.org" :maxlevel . 1)
	  ("media.org" :maxlevel . 1)))

  (advice-add 'org-refile :after 'org-save-all-org-buffers)

#+end_src

** Capture templates

- As mentioned above, quickly capture ideas into the inbox file, to be processed later.
- Also, quickly start taking meeting notes, organised in a file sorted by date.

To quickly jump to the last captured entry, call `bookmark-jump org-capture-last-stored`, which is bound to "C-x r b".

#+begin_src emacs-lisp
  (setq org-capture-templates
      `(("t" "Task" entry (file "inbox.org")
	 "* SCOPE %?\n%U\n%a" :prepend t)
	("m" "Meeting notes" entry (file "meetings.org")
	 "* %?\n%U")))

#+end_src

** Agenda configuration

- Start org agenda with log-mode, so done items are displayed along with their completion times.
- Set custom agenda commands to:
  - Show my schedule and next actions;
  - Show tasks organised by workflow status.

#+begin_src emacs-lisp
  ;; Agenda configuration
  (setq org-agenda-start-with-log-mode t)
  (setq org-agenda-log-mode-items '(closed clock state))
  (setq org-agenda-window-setup "current-window")

  (setq org-agenda-custom-commands
	'(("d" "Dashboard"
	   ((agenda "" ((org-deadline-warning-days 7)))
	    (todo "TODO"
		  ((org-agenda-overriding-header "Next Tasks")))))

	  ("w" "Workflow Status"
	   ((todo "WAIT"
		  ((org-agenda-overriding-header "Waiting")
		   (org-agenda-files org-agenda-files)))
	    (todo "REVIEW"
		  ((org-agenda-overriding-header "In Review")
		   (org-agenda-files org-agenda-files)))
	    (todo "TODO"
		  ((org-agenda-overriding-header "Ready for Work")
		   (org-agenda-files org-agenda-files)))
	    (todo "SCOPE"
		  ((org-agenda-overriding-header "In Scoping")
		   (org-agenda-todo-list-sublevels nil)
		   (org-agenda-files org-agenda-files)))
	    (todo "BACKLOG"
		  ((org-agenda-overriding-header "Project Backlog")
		   (org-agenda-todo-list-sublevels nil)
		   (org-agenda-files org-agenda-files)))))))

#+end_src

* Shell

** vterm

I choose to use [[https://github.com/akermu/emacs-libvterm/][vterm]] because it is fast, compatible with my usual terminal setup, and it supports interactive commands.

To get vterm to run on OSX machines, run

#+begin_src shell
  brew install cmake
  brew install libtool
#+end_src

The command `M-x multi-vterm` lets me easily create multiple terminals.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Shell
  ;; _____________________________________________________________________________

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
    (setq vterm-max-scrollback 10000))

  (use-package multi-vterm)
#+end_src

* Programming

** Rainbow delimiters

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Rainbow delimiters
  ;; _____________________________________________________________________________

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    :config
    (set-face-background 'rainbow-delimiters-base-error-face "#e6194b")
    (set-face-foreground 'rainbow-delimiters-depth-1-face "#e6194b")
    (set-face-foreground 'rainbow-delimiters-depth-2-face "#f58231")
    (set-face-foreground 'rainbow-delimiters-depth-3-face "#ffe119")
    (set-face-foreground 'rainbow-delimiters-depth-4-face "#bfef45")
    (set-face-foreground 'rainbow-delimiters-depth-5-face "#aaffc3")
    (set-face-foreground 'rainbow-delimiters-depth-6-face "#42d4f4")
    (set-face-foreground 'rainbow-delimiters-depth-7-face "#4363d8")
    (set-face-foreground 'rainbow-delimiters-depth-8-face "#911eb4")
    (set-face-foreground 'rainbow-delimiters-depth-9-face "#f032e6"))

#+end_src

** LSP mode

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; lsp-mode
  ;; _____________________________________________________________________________

  (use-package lsp-mode
    :commands
    (lsp lsp-deferred lsp-register-custom-settings)
    :hook
    (go-mode . lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :bind
    (:map lsp-mode-map
	  ("M-." . xref-find-definitions))
    :config
    (setq lsp-headerline-breadcrumb-segments '(project path-up-to-project file symbols))
    (setq lsp-eldoc-render-all t)

    ;; Performance hax from here: https://emacs-lsp.github.io/lsp-mode/page/performance/
    (setq gc-cons-threshold 100000000)
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
    (setq lsp-log-io nil) ; if set to true can cause a performance hit
    (setq lsp-idle-delay 0.200))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-doc-enable t
	  lsp-ui-peek-enable t
	  lsp-ui-sideline-enable t
	  lsp-ui-imenu-enable t
	  lsp-ui-flycheck-enable t))

#+end_src

** Company

- Hook company to prog-mode and not lsp-mode because Emacs Lisp doesn't use an LSP.

#+begin_src emacs-lisp
  (use-package company
    :hook ((prog-mode) . company-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1))

  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode 1))
#+end_src

** Yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :commands yas-minor-mode
    :hook (lsp-mode . yas-minor-mode))

#+end_src

** Go

This needs some cleaning up. I accumulated this configuration while working with Go a lot. I am not currently developing in Go, so fixing this is not urgent.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; go-mode
  ;; _____________________________________________________________________________

  ;; (setenv "GOPATH" "<~/>")
  ;; (setenv "GOROOT" "<output of "which go">")

  (setenv "PATH"
	  (concat
	   (getenv "GOPATH") "/bin:"
	   (getenv "GOROOT") "/bin:"
	   "/usr/local/bin:"
	   (getenv "PATH")))

  ;; (setq lsp-go-gopls-server-path "<output of "which gopls", eg ~/bin/gopls>")

  (use-package go-mode
    :defer t
    :mode ("\\.go\\'" . go-mode)
    :init
    (setq compile-command "echo Formating... && go fmt && echo Building... && go build -v && echo Testing... && go test -v")
    (setq compilation-read-command nil)
    ;; This needs to be here and not in a :hook statement because :hook
    ;; automatically sufixes '-hook' to 'gofmt-before-save'
    (add-hook 'before-save-hook 'gofmt-before-save)
    :bind
    (:map go-mode-map
	   ("M-," . compile)
	   ("s-l" . goto-line)))

  (defun nrm/go-compilation-hook ()
    (when (not (get-buffer-window "*compilation*"))
      (save-selected-window
	(save-excursion
	    (switch-to-buffer "*compilation*")))))

  (add-hook 'compilation-mode-hook 'nrm/go-compilation-hook)

  (setq compilation-scroll-output t)

  ;; Handle Go modules in large monorepos
  (setq lsp-go-directory-filters ["-vendor" "-manifests"])
  (lsp-register-custom-settings
   '(("gopls.memoryMode" "DegradeClosed")
     ("gopls.expandWorkspaceToModule" nil t)))

  ;; Configure goimports
  ;; (setq gofmt-command "<path to goimports, eg ~/bin/goimports>")
  ;; TODO: The following lines don't seem to cause the behaviour I expect. Fix them.
  ;; (setq lsp-go-goimports-local "<set of imports to separate, eg github.com/your-company>")
  ;; (setq gofmt-args '("-local" "<same as the variable above>"))

#+end_src

* Beancount

This is required to use beancount to manage my personal ledger. Beancount isn't available on an ELPA, so I need to figure out a way to cleanly include this in my configuration.

#+begin_src emacs-lisp
  ;; ___________________________________________________________________________
  ;; Beancount
  ;; ___________________________________________________________________________

  ;; (defun beancount-save () (interactive)
  ;;        (beancount-align-numbers (point-min) (point-max))
  ;;   (delete-trailing-whitespace)
  ;;   (save-buffer)
  ;;   )

  ;; (add-to-list 'load-path "~/.emacs.d/beancount-mode")
  ;; (require 'beancount)

  ;; (add-to-list 'auto-mode-alist '("\\.beancount\\'" . beancount-mode))
  ;; (add-hook 'beancount-mode-hook #'outline-minor-mode)

  ;; ;;(define-key beancount-mode-map (kbd "s-s") 'beancount-save)
  ;; (define-key beancount-mode-map (kbd "C-c C-n") #'outline-next-visible-heading)
  ;; (define-key beancount-mode-map (kbd "C-c C-p") #'outline-previous-visible-heading)

#+end_src

* Local config

Load configuration that is specific to the local machine. For example, functions that are only useful on my work machine.

#+begin_src emacs-lisp
  ;; ___________________________________________________________________________
  ;; Local config
  ;; ___________________________________________________________________________

  (let ((local-config "~/local-config.el"))
   (when (file-exists-p local-config)
     (load-file local-config)))

#+end_src
