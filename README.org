#+title: Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :results output silent

* About

My very own Emacs configuration. Based on [[https://github.com/daviwil/emacs-from-scratch][Emacs from scratch]], customised to what I actually need.

I keep some comments in the Emacs Lisp snippets, as well as comments in the org file, so that the init.el file is easier to navigate.

Instructions on how to set Caps Lock to act as Control are [[https://support.apple.com/en-gb/guide/mac-help/mchlp1011/mac][here]]. Remember to do this for each machine and each connected keyboard!

Some of the things I want to do with my configuration:

- [X] Rename org files
- [X] Fix org-mode capture
- [X] Org mode changes
  - Bullets
  - Ellypsis
- [X] Rainbow delimiters
- [X] Use Org Babel to document Emacs config
- [X] Ivy + ivy-rich + which-key + counsel + helpful
- [X] Shell mode
- [X] dad-joke
- [X] Prescient
- [X] Homebrew
- [X] Configure list-buffers
- [X] Replace tasks and projects with actions
- [X] Make counsel-find-file not show ./ and ../
- [X] Replace lsp-mode with eglot
- [X] imenu
- [X] Beancount mode
- [ ] Look into org tags for quick win tasks
- [ ] org-gcal
- [ ] org-present
- [ ] Roam
- [ ] Look into ag + something? as a replacement for rgrep/wgrep
- [ ] Tune gc cons threshold
- [X] Capture notes for a future meeting
- [ ] gnu-elpa-keyring-update
- [X] Figure out how to force tramp to use my ~/.ssh/config
- [ ] Learn more about lexical binding in ELisp
- [X] Figure out how I used to use org and beancount modes simultaneously
  Added a hook to use outline-minor-mode with beancount mode. Beancount files should not have headers specifying modes.
- Language-specific features
  - [ ] Java mode
  - [ ] Python mode
    Currently, the pyright server doesn't start. It's trying to install something to do with nodeenv, which is a node.js thing. Python development isn't a huge priority at the moment, and I already have syntax highlighting from python mode, so I'll postpone installing node things just to use eglot with python.
  - [ ] Protobuf mode
  - [ ] LaTeX mode
  - [ ] gopls optimisations
    Have a look through the [options available in gopls](https://github.com/golang/tools/blob/master/gopls/doc/emacs.md).

* Start

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Start loading config
  ;; _____________________________________________________________________________

  (toggle-debug-on-error)

  (switch-to-buffer "*Messages*")
  (message "Started loading config at %s" (format-time-string "%T"))

#+end_src

* Package management

- Set up the MELPA archive.
- Make sure that use-package is installed, so that it can be used to install all the other packages.
- Always ensure packages to avoid confusion over what is or isn't installed.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Package management
  ;; _____________________________________________________________________________

  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (package-initialize)

  (unless package-archive-contents
   (package-refresh-contents))

  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Global configuration

Run `M-x all-the-icons-install-fonts` to actually install icons.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Global configuration
  ;; _____________________________________________________________________________

  (setq inhibit-startup-message t)

  ;; Make it easier to access emacs config
  (set-register ?e (cons 'file "~/.emacs.d/README.org"))

  ;; Easy commenting
  (global-set-key (kbd "M-/") 'comment-or-uncomment-region)

  ;; Cycle through buffers easily
  (global-set-key (kbd "s-<left>") 'previous-buffer)
  (global-set-key (kbd "s-<right>") 'next-buffer)

  ;; Cycle through windows easily
  (global-set-key (kbd "C-<tab>") 'other-window)
  (defun switch-to-prev-window ()
    (interactive)
    (other-window -1))
  (global-set-key (kbd "C-S-<tab>") 'switch-to-prev-window)

  ;; Simplify yes-or-no prompts
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Make the right option key not act as meta, to let me type characters that need option
  (setq ns-right-alternate-modifier 'none)

  ;; Theme and display configuration
  (load-theme 'tango-dark t)
  (column-number-mode)
  (global-display-line-numbers-mode)
  (global-visual-line-mode)

  ;; Icons that can be used by several packages
  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-minor-modes t))

  ;; Natural language formatting and spelling
  (setq sentence-end-double-space nil)
  (setq ispell-program-name "/opt/homebrew/bin/ispell")
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))

#+end_src

* Silly things

Everything else in this configuration serves a purpose. The packages in this section are just for fun. They'll be the first to be sacrificed when Emacs inevitable devours all my memory.

#+begin_src emacs-lisp
  (use-package nyan-mode
    :config (nyan-mode 1))

  (use-package dad-joke)

#+end_src

* Completion

** which-key

When typing a key bind prefix, WK mode expands the minibuffer to display commands under that prefix.

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.5))

#+end_src

** Ivy

Ivy provides completion functions for all interactive functions that require input, such as find-file and switch-buffer.

#+begin_src emacs-lisp
  (use-package ivy
    :demand
    :bind (:map ivy-minibuffer-map
		("TAB" . ivy-alt-done))
    :config
    (setq ivy-initial-inputs-alist nil)
    (ivy-mode 1))

  ;; Stop ./ and ../ from showing up in filepath completions
  (setq ivy-extra-directories nil)
#+end_src

** Swiper

A better version of isearch to fuzzy search in a file.

#+begin_src emacs-lisp
  (use-package swiper
    :demand
    :bind ("C-s" . swiper))
#+end_src

** Counsel

Replaces some common functions with versions that are easier to integrate with Ivy and other packages.

`ivy-rich` provides a better UI for counsel.

#+begin_src emacs-lisp
  (use-package counsel
    :config (counsel-mode 1)
    :bind ("C-c i" . counsel-imenu))

  (use-package ivy-rich
    :config
    (ivy-rich-mode 1))

#+end_src

** Prescient

Sorts completions by recently used and most used, instead of the default sorting order.

#+begin_src emacs-lisp
  (use-package ivy-prescient
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src

** Company

- Text completion for source code and natural language.

#+begin_src emacs-lisp
  (use-package company
    :hook ((prog-mode text-mode) . company-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1))

  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode 1))
#+end_src

** Helpful

This helpful package replaces the default help functions with ones that provide more information, such as source code snippets.

The functions to describe functions and variables are passed through the counsel commands so that they have completion using counsel and ivy-rich, rather than just Ivy.

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Better built-ins

** Dired

- Run `brew install coreutils` on MacOS to get gls, which supports the `--group-directories-first` option.
- Toggle dired omit mode with "C-x M-o". This mode hides "uninteresting" files such as backup and dot files. This is better than hiding files through options passed to the ls command because it lets me quickly toggle the mode when I need to look at dot files, for example.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Dired
  ;; _____________________________________________________________________________

  (use-package dired
    :ensure nil
    :hook (dired-mode . dired-omit-mode)
    :custom ((dired-listing-switches "-lah --group-directories-first"))
    :config
    (require 'dired-x)
    (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
    (setq insert-directory-program "gls"))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

** IBuffer

- Replace `list-buffers` the more powerful built-in `ibuffer`.
- Group buffers by type, and make it easier to collapse groups.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; IBuffer
  ;; _____________________________________________________________________________

  (require 'ibuffer)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
	(quote (("default"
		 ("Side effects" (or
				  (derived-mode . helpful-mode)
				  (and
				   (name . "^\\*")
				   (size-lt . 1))))
		 ("Dired" (mode . dired-mode))
		 ("Org" (mode . org-mode))
		 ("Source code" (or
				 (derived-mode . prog-mode)
				 (derived-mode . protobuf-mode)))
		 ("Version control" (derived-mode . magit-section-mode))))))

  (add-hook 'ibuffer-mode-hook
	    (lambda () (ibuffer-switch-to-saved-filter-groups "default")))

  (setq ibuffer-default-sorting-mode 'filename/process)

  (setq ibuffer-fontification-alist
	'((100 (eq major-mode 'java-mode) magit-process-ng)
	  (10 buffer-read-only font-lock-constant-face)
	  (15 (and buffer-file-name
		   (string-match ibuffer-compressed-file-name-regexp
				 buffer-file-name))
	      font-lock-doc-face)
	  (20 (string-match "^\\*" (buffer-name)) font-lock-keyword-face)
	  (25 (and (string-match "^ " (buffer-name))
		   (null buffer-file-name))
	      italic)
	  (30 (memq major-mode ibuffer-help-buffer-modes) font-lock-comment-face)
	  (35 (derived-mode-p 'dired-mode) font-lock-function-name-face)
	  (40 (and (boundp 'emacs-lock-mode) emacs-lock-mode) ibuffer-locked-buffer)))

  (defun nrm/ibuffer-toggle-current-group()
    (interactive)
    (ibuffer-forward-filter-group)
    (ibuffer-backward-filter-group)
    (ibuffer-toggle-filter-group))

  (define-key ibuffer-mode-map (kbd "<tab>") 'nrm/ibuffer-toggle-current-group)

#+end_src

** wgrep

- Writable grep results.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; IBuffer
  ;; _____________________________________________________________________________

  (use-package wgrep)

#+end_src

* Magit

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Magit
  ;; _____________________________________________________________________________

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    :bind ("C-x g" . magit-status))

#+end_src

* Org

** org-mode and UI

Configuration that I want to apply to every Org buffer by default.

Actions can be in one of the following states, according to the GTD method:
- SCOPE: I want to do something about this, but I haven't decided what. I need to spend some time figuring out what I need to do, if anything.
- BACKLOG: I have identified there is something I want to do/process, but it isn't urgent. It is noted down for later.
- TODO: I have something to do, and I know exactly what it is. This task is ready to be worked on, as soon as I decide to pick it up.
- WAIT: This task is blocked on something, such as receiving an email response. I should check in every once in a while, but there is nothing I can currently do about it.
- REVIEW: I have finished this task, and I should spend some time writing a mini-debrief about it with any notes I want to keep, as well as any next actions.
- DONE: This task is done, reviewed, and archived somewhere.
- CANCELLED: I decided not to do this task.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Org
  ;; _____________________________________________________________________________

  (use-package org
    :bind
    ("\C-cl" . org-store-link)
    ("s-a" . org-agenda)
    ("s-c" . org-capture)
    :custom
    (org-ellipsis " ▾")
    (org-todo-keywords '((sequence "SCOPE(s)" "BACKLOG(b)" "TODO(t)" "WAIT(w)" "REVIEW(r)" "|" "DONE(d)" "CANCELLED(c)")))
    ;; Record the date but not the time of day when a todo item is done
    (org-log-done 'time)
    (org-log-done-with-time nil)
    (org-log-into-drawer t)
    ;; Allow items to be refiled to the top level in a file, rather than under another headline
    (org-refile-use-outline-path 'file)
    ;; Show file and headline paths in the refile completion buffer
    (org-outline-path-complete-in-steps nil)
    ;; Refile targets to the top of files and headlines, rather than the end
    (org-reverse-note-order t)
    ;; Display done items with their completion date
    (org-agenda-start-with-log-mode t)
    (org-agenda-log-mode-items '(closed clock state))
    (org-agenda-window-setup "current-window")
    ;; If an entry has a TODO label, don't check its children
    (org-agenda-todo-list-sublevels nil)
    :config
    (advice-add 'org-refile :after 'org-save-all-org-buffers))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Babel

How meta!

- Automatically tangle this file on save to generate init.el.
- Don't ask for permission to run code in org babel.
- Make it easier to insert code snippets.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Babel
  ;; _____________________________________________________________________________

  ;; Automatically tangle the README.org file on save
  (defun nrm/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/README.org"))
      (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'nrm/org-babel-tangle-config)))

  (setq org-confirm-babel-evaluate nil)

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))

#+end_src

** Roam

Roam needs a C/C++ compiler to generate the required database.

To make a header in a file into its own node, run `org-id-get-create`.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Roam
  ;; _____________________________________________________________________________

  (use-package org-roam
    :demand
    :custom
    (org-roam-directory "~/brain")
    (org-roam-capture-templates
     '(("t" "Topic" plain
	"%?"
	:target (file+head "roam-${slug}.org" "#+title: ${title}\n#+filetags: Topic\n#+date: %U")
	:unnarrowed t)
       ("a" "Action" plain
	"* Goals\n%?\n* Actions\n"
	:target (file+head "roam-${slug}.org" "#+title: ${title}\n#+filetags: Actions AgendaSource\n#+date: %U")
	:unnarrowed t)
       ("p" "Person" plain
	"%?"
	:target (file+head "roam-${slug}.org" "#+title: ${title}\n#+filetags: Person\n#+date: %U")
	:unnarrowed t)
       ("b" "Book" plain
	"- Author: %?\n- Notes: \n\n* Summary\n\n* Chapters\n\n* Comments\n"
	:target (file+head "roam-${slug}.org" "#+title: ${title}\n#+filetags: Book\n#+date: %U")
	:unnarrowed t)
       ("l" "Location" plain
	"* Comments\n%?\n* Visits\n\n* Ice cream\n\n* Restaurants\n\n* Points of interest\n"
	:target (file+head "roam-${slug}.org" "#+title: ${title}\n#+filetags: Location\n#+date: %U")
	:unnarrowed t)))
    :bind (("s-r" . org-roam-node-find)
	   :map org-mode-map
	   ("C-c i" . org-roam-node-insert)
	   ("C-c b" . org-roam-buffer-toggle))
    :config
    (org-roam-db-autosync-enable))

  (defun nrm/roam-list-files-with-tag (tag-name)
    (mapcar #'org-roam-node-file
	    (seq-filter
	     (lambda (elt) (member tag-name (org-roam-node-tags elt)))
	     (org-roam-node-list))))

  (setq org-agenda-files (nrm/roam-list-files-with-tag "Test"))

#+end_src

** File structure

- All org files used in my gtd setup are in the same directory.
- Tasks and projects are stored in the actions file.
- The inbox file is used to quickly capture ideas of things I should do without interrupting my focus.
- The rar and media files are used to keep personal notes.
- I want to easily move org entries between files, but not into the inbox file. The only way into the inbox file should be through capture, and entries in the inbox file should be moved to the appropriate place once I process them.
- Save all org buffers after refiling, to prevent entries being lost if Emacs crashes.

#+begin_src emacs-lisp
  ;; File structure
  (setq org-directory "~/gtd")
  (set-register ?g (cons 'file (concat org-directory "/actions.org")))

  (add-to-list 'org-agenda-files "inbox.org")
  (add-to-list 'org-agenda-files "meetings.org")
  (add-to-list 'org-agenda-files "actions.org")

  (setq org-refile-targets
	'(("actions.org" :maxlevel . 3)
	  ("rar.org" :maxlevel . 1)
	  ("media.org" :maxlevel . 1)
	  ("meetings.org" :maxlevel . 1)))

#+end_src

** Capture templates

- As mentioned above, quickly capture ideas into the inbox file, to be processed later.
- Also, quickly start taking meeting notes, organised in a file sorted by date.

To quickly jump to the last captured entry, call `bookmark-jump org-capture-last-stored`, which is bound to "C-x r b".

#+begin_src emacs-lisp
  (setq org-capture-templates
      `(("t" "Task" entry (file "inbox.org")
	 "* SCOPE %?\n%U\n%a" :prepend t)
	("m" "Meeting notes" entry (file "meetings.org")
	 "* REVIEW %?\n%t" :prepend t)))

#+end_src

** Agenda configuration

Create custom agenda commands to:
- Show my schedule and next actions;
- Show tasks organised by workflow status.

#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
	'(("d" "Dashboard"
	   ((agenda "" ((org-deadline-warning-days 7)))
	    (todo "REVIEW"
		  ((org-agenda-overriding-header "In Review")
		   (org-agenda-files org-agenda-files)))
	    (todo "TODO"
		  ((org-agenda-overriding-header "Ready for Work")
		   (org-agenda-files org-agenda-files)))
	    (todo "SCOPE"
		  ((org-agenda-overriding-header "In Scoping")
		   (org-agenda-files org-agenda-files)))))

	  ("w" "Workflow Status"
	   ((todo "WAIT"
		  ((org-agenda-overriding-header "Waiting")
		   (org-agenda-files org-agenda-files)))
	    (todo "REVIEW"
		  ((org-agenda-overriding-header "In Review")
		   (org-agenda-files org-agenda-files)))
	    (todo "TODO"
		  ((org-agenda-overriding-header "Ready for Work")
		   (org-agenda-files org-agenda-files)))
	    (todo "SCOPE"
		  ((org-agenda-overriding-header "In Scoping")
		   (org-agenda-files org-agenda-files)))
	    (todo "BACKLOG"
		  ((org-agenda-overriding-header "Project Backlog")
		   (org-agenda-files org-agenda-files)))))))

#+end_src

* Shell

** vterm

I choose to use [[https://github.com/akermu/emacs-libvterm/][vterm]] because it is fast, compatible with my usual terminal setup, and it supports interactive commands.

To get vterm to run on OSX machines, run

#+begin_src shell
  brew install cmake
  brew install libtool
#+end_src

The command `M-x multi-vterm` lets me easily create multiple terminals.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Shell
  ;; _____________________________________________________________________________

  (use-package vterm
    :commands vterm
    :hook (vterm-mode . goto-address-mode)
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
    (setq vterm-max-scrollback 10000))

  (global-set-key (kbd "s-t") 'vterm)

  (use-package multi-vterm)
#+end_src

* TRAMP

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; TRAMP
  ;; _____________________________________________________________________________

  (use-package tramp
    :custom
    (tramp-default-method "ssh")
    ;; Change this to get, for example, error messages only
    (tramp-verbose 3)
    ;; Load controlmaster options from ~/.ssh/config directly
    (tramp-use-ssh-controlmaster-options nil)
    :config
    (add-to-list 'tramp-connection-properties
		 (list "/ssh:" "direct-async-process" t)))
#+end_src

* Programming

** Rainbow delimiters

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Rainbow delimiters
  ;; _____________________________________________________________________________

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    :config
    (set-face-background 'rainbow-delimiters-base-error-face "#e6194b")
    (set-face-foreground 'rainbow-delimiters-depth-1-face "#e6194b")
    (set-face-foreground 'rainbow-delimiters-depth-2-face "#f58231")
    (set-face-foreground 'rainbow-delimiters-depth-3-face "#ffe119")
    (set-face-foreground 'rainbow-delimiters-depth-4-face "#bfef45")
    (set-face-foreground 'rainbow-delimiters-depth-5-face "#aaffc3")
    (set-face-foreground 'rainbow-delimiters-depth-6-face "#42d4f4")
    (set-face-foreground 'rainbow-delimiters-depth-7-face "#4363d8")
    (set-face-foreground 'rainbow-delimiters-depth-8-face "#911eb4")
    (set-face-foreground 'rainbow-delimiters-depth-9-face "#f032e6"))

#+end_src

** imenu-list

Show a side buffer with a structured overview of the tags in the current buffer.

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; imenu-list
  ;; _____________________________________________________________________________

  (use-package imenu-list
    :bind ("s-i" . imenu-list-smart-toggle)
    :custom (imenu-list-focus-after-activation t))

#+end_src

** Compilation

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Compilation
  ;; _____________________________________________________________________________

  (defun nrm/compilation-hook ()
    (when (not (get-buffer-window "*compilation*"))
      (save-selected-window
	(save-excursion
	    (switch-to-buffer "*compilation*")))))

  (add-hook 'compilation-mode-hook 'nrm/compilation-hook)
  (add-hook 'compilation-mode-hook 'goto-address-mode)

  (setq compilation-scroll-output t)

#+end_src

** Flymake

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Flymake
  ;; _____________________________________________________________________________

  (use-package flymake
    :bind
    (:map flymake-mode-map
	   ("M-n" . flymake-goto-next-error)
	   ("M-p" . flymake-goto-prev-error)))

#+end_src

** Eglot

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Eglot
  ;; _____________________________________________________________________________

  (use-package eglot
    :init
    (dolist (hook '(go-mode-hook python-mode-hook java-mode-hook))
      (add-hook hook 'eglot-ensure))
    :custom
    (eglot-autoshutdown t)
    (eglot-sync-connect nil))

#+end_src

** Go

This needs some cleaning up. I accumulated this configuration while working with Go a lot. I am not currently developing in Go, so fixing this is not urgent.

For this to work, add GOROOT and GOPATH to PATH in ~/.profile (or equivalent).

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; go-mode
  ;; _____________________________________________________________________________

  (use-package go-mode
    :defer t
    :mode ("\\.go\\'" . go-mode)
    :init
    (setq compile-command "echo Formating... && go fmt && echo Building... && go build -v && echo Testing... && go test -v")
    (setq compilation-read-command nil)
    (add-hook 'before-save-hook 'gofmt-before-save))

  ;; Configure goimports
  ;; (setq gofmt-command "<path to goimports, eg ~/bin/goimports>")

#+end_src

* Beancount

Beancount isn't available through ELPA, so I cloned the repo into my emacs config. For it to be accessible through `use-package`, run `M-x package-install-file ~/.emacs.d/beancount-mode/beancount`.

Follow the instructions in my beans repo to install all the needed Python packages.

#+begin_src emacs-lisp
  ;; ___________________________________________________________________________
  ;; Beancount
  ;; ___________________________________________________________________________

  (use-package beancount-mode
    :ensure nil
    :mode ("\\.beancount\\'" . beancount-mode)
    :init
    (add-hook 'beancount-mode-hook #'outline-minor-mode)
    :bind
    (:map beancount-mode-map
	  ("C-c C-n" . outline-next-visible-heading)
	  ("C-c C-p" . outline-previous-visible-heading)))

  ;; Copied from beancount-mode/etc/emacsrc
  (defun beancount-format-file ()
    (interactive)
    (let ((line-no (line-number-at-pos)))
      (call-process-region (point-min) (point-max) "bean-format" t (current-buffer))
      (goto-line line-no)
      (recenter)))

  (set-register ?b (cons 'file "~/beans"))

#+end_src

* Local config

Load configuration that is specific to the local machine. For example, functions that are only useful on my work machine.

#+begin_src emacs-lisp
  ;; ___________________________________________________________________________
  ;; Local config
  ;; ___________________________________________________________________________

  (let ((local-config "~/local-config.el"))
   (when (file-exists-p local-config)
     (load-file local-config)))

#+end_src

* End

#+begin_src emacs-lisp
  ;; _____________________________________________________________________________
  ;; Finish loading config
  ;; _____________________________________________________________________________

  (toggle-debug-on-error)

  (message "Finished loading config at %s" (format-time-string "%T"))
  (message "Emacs loaded in %s with %d garbage collections."
	   (format "%.2f seconds"
		   (float-time
		    (time-subtract after-init-time before-init-time)))
	   gcs-done)
#+end_src
